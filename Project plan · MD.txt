# 🏢 건물 관리 PWA 앱 - 종합 기획서

---

## 📌 프로젝트 개요

**프로젝트명**: 건물 정보 관리 PWA  
**목적**: 건물 정보(위치, 유형별) 입력·조회·삭제 업무 효율화  
**대상 플랫폼**: 모바일 (PWA) + 웹 (반응형)  
**디자인 테마**: 게임UI 스타일 (골드/보라색 프레임, 판타지 미학)

---

## 🛠️ 기술 스택

| 구분 | 기술 |
|------|------|
| **프레임워크** | React 18 + TypeScript |
| **스타일링** | Tailwind CSS + Custom CSS |
| **상태관리** | React Context API |
| **로컬DB** | IndexedDB (idb 라이브러리) |
| **PWA** | Workbox, manifest.json |
| **번들러** | Vite |
| **아이콘** | lucide-react |

---

## 📁 폴더 구조

```
building-management-pwa/
├── src/
│   ├── components/
│   │   ├── common/
│   │   │   ├── Header.jsx
│   │   │   ├── BottomNavigation.jsx (모바일)
│   │   │   ├── Sidebar.jsx (웹)
│   │   │   └── GameUIFrame.jsx (공용 프레임)
│   │   ├── mobile/
│   │   │   ├── MobileView.jsx
│   │   │   ├── MobileBuildingCard.jsx
│   │   │   ├── MobileAddButton.jsx
│   │   │   └── MobileFilterTabs.jsx
│   │   ├── web/
│   │   │   ├── WebView.jsx
│   │   │   ├── WebBuildingTable.jsx
│   │   │   ├── WebFilterPanel.jsx
│   │   │   └── WebAddPanel.jsx
│   │   ├── forms/
│   │   │   ├── BuildingForm.jsx
│   │   │   ├── FormField.jsx
│   │   │   └── ValidationMessages.jsx
│   │   └── modals/
│   │       ├── AddBuildingModal.jsx
│   │       ├── BuildingDetailModal.jsx
│   │       ├── ConfirmDeleteModal.jsx
│   │       ├── ImportCSVModal.jsx (추가)
│   │       └── BackupRestoreModal.jsx (추가)
│   ├── hooks/
│   │   ├── useIndexedDB.js
│   │   ├── useResponsive.js
│   │   └── useBuildingFilters.js
│   ├── context/
│   │   └── BuildingContext.jsx
│   ├── styles/
│   │   ├── gameUI.css
│   │   ├── responsive.css
│   │   └── animations.css
│   ├── utils/
│   │   ├── sortUtils.js
│   │   ├── validationUtils.js
│   │   ├── dateUtils.js
│   │   ├── iconGenerator.js
│   │   ├── csvImporter.js (추가)
│   │   └── jsonBackup.js (추가)
│   ├── data/
│   │   └── constants.js (위치, 유형 옵션)
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css
├── public/
│   ├── manifest.json
│   ├── service-worker.js
│   └── icons/
│       ├── icon-192.png
│       └── icon-512.png
├── package.json
├── vite.config.js
└── .env.example
```

---

## 📊 데이터 모델

### Building 스키마

```javascript
{
  id: string (UUID), // 자동 생성
  건물명: string (required, unique),
  지번: string (required),
  사용승인일: string (YYYY-MM-DD),
  층수: number,
  주차대수: number,
  세대수: number,
  공동현관비번: string,
  관리실번호: string,
  위치: enum [
    "마곡A", "마곡B", "발산A", "발산B", 
    "향교", "나루", "기타"
  ],
  유형: enum [
    "오피스텔", "오피스", "상가", "지산", "아파트"
  ],
  생성일시: string (ISO 8601),
  수정일시: string (ISO 8601)
}
```

### IndexedDB 구조

```
Database: BuildingDB
└── Store: buildings
    ├── keyPath: id
    ├── 인덱스 1: 건물명 (정렬용)
    ├── 인덱스 2: 위치
    ├── 인덱스 3: 유형
    └── 인덱스 4: 위치+유형 (복합 필터)
```

---

## 🎯 주요 기능

### 1. 필터링 탭 (모바일/웹 공용)

**위치 탭** (1단)
```
[마곡A] [마곡B] [발산A] [발산B] [향교] [나루] [기타]
```

**유형 탭** (2단, 첫 번째 탭 하단)
```
[오피스텔] [오피스] [상가] [지산] [아파트]
```

- 기능: 복수 선택 가능 (위치 1개 + 유형 1개 권장)
- 초기 상태: 모든 건물 표시
- 선택 유지: 페이지 새로고침 후에도 유지

### 2. 건물 목록 (가나다순 정렬)

**모바일 카드 UI**
```
┌─ 게임UI 프레임 ──────────────┐
│ 🏢 건물명 (가나다순)         │
│ ━━━━━━━━━━━━━━━━━          │
│ 지번: 마곡동 123-45          │
│ 사용승인: 2023.01.15         │
│ ┌──────────────────────┐    │
│ │ 층수: 12 | 주차: 15대│    │
│ │ 세대수: 45호         │    │
│ └──────────────────────┘    │
│ ← 슬라이드로 삭제 옵션       │
└──────────────────────────────┘
```

**웹 테이블 UI**
```
| 건물명 | 지번 | 사용승인일 | 층수 | 주차 | 세대 | 위치 | 유형 | 작업 |
|--------|------|----------|------|------|------|------|------|------|
| 건물1  | ...  | ...      | ...  | ...  | ...  | ...  | ...  | [수정][삭제] |
```

### 3. 추가 기능

**모바일**
- 하단 플로팅 액션 버튼 (FAB) → 모달 폼 오픈
- 모달에서 입력 → 저장

**웹**
- 헤더 "건물 추가" 버튼 → 우측 사이드패널 오픈
- 패널에서 입력 → 저장

### 4. 삭제 기능

**모바일**
- 카드 좌/우로 슬라이드 → "삭제" 버튼 노출
- 클릭 → 확인 모달 → 삭제

**웹**
- 행 호버 → 삭제 버튼 표시
- 클릭 → 확인 모달 → 삭제

### 5. 상세 조회/수정

- 카드 클릭 → 상세 모달/패널 오픈
- 내용 수정 가능
- 저장 → IndexedDB 업데이트

### 6. CSV 초기 데이터 마이그레이션

**기능:**
- CSV 파일 선택 업로드
- 자동 파싱 (UTF-8, CP949 인코딩 지원)
- 데이터 검증
- 중복 체크 (건물명 기준)
- 일괄 임포트 → IndexedDB 저장

**CSV 포맷:**
```
건물명,지번,사용승인일,층수,주차대수,세대수,공동현관비번,관리실번호,위치,유형
가건물,마곡동 123-45,2023-01-15,12,15,45,1234,555,마곡A,오피스텔
나건물,발산동 456-78,2023-02-20,8,10,30,5678,666,발산A,오피스
```

**UI:**
- 웹: 헤더 "CSV 임포트" 버튼
- 모바일: 하단 메뉴 → 임포트 옵션
- 임포트 모달 (진행도 표시, 성공/실패 건수)

### 7. JSON 백업 & 복원

**백업 기능:**
- 모든 건물 데이터 → JSON 내보내기
- 파일명: `buildings-backup-{YYYY-MM-DD}.json`
- 메타정보 포함 (백업일시, 총 건물 수)

**복원 기능:**
- JSON 파일 선택 업로드
- 기존 데이터 처리 옵션:
  - 덮어쓰기 (기존 데이터 삭제)
  - 병합 (새 데이터 추가, 중복 무시)
- 복원 확인 모달
- 성공/실패 알림

**JSON 포맷:**
```json
{
  "metadata": {
    "version": "1.0",
    "backupDate": "2025-10-30T09:38:00Z",
    "totalCount": 25,
    "exportedFrom": "building-management-pwa"
  },
  "buildings": [
    {
      "id": "1730263080000-0.123456",
      "건물명": "가건물",
      "지번": "마곡동 123-45",
      "사용승인일": "2023-01-15",
      "층수": 12,
      "주차대수": 15,
      "세대수": 45,
      "공동현관비번": "1234",
      "관리실번호": "555",
      "위치": "마곡A",
      "유형": "오피스텔",
      "생성일시": "2025-01-15T10:00:00Z"
    }
  ]
}
```

---

## 📱 UI/UX 흐름

### 모바일 흐름

```
로드
  ↓
[위치탭] [유형탭] 초기화
  ↓
필터 적용 → 건물 카드 목록 (가나다순)
  ↓
사용자 선택:
  ├─ 카드 클릭 → 상세 모달
  │   ├─ 수정 → 저장
  │   └─ 닫기
  ├─ FAB 클릭 → 추가 모달
  │   ├─ 입력 → 저장
  │   └─ 닫기
  ├─ 카드 슬라이드 → 삭제 모달
  │   ├─ 확인 → 삭제
  │   └─ 취소
  └─ 하단 메뉴 버튼 (⋯)
      ├─ CSV 임포트 → 파일 선택 → 검증 → 저장
      ├─ 데이터 백업 → JSON 다운로드
      └─ 데이터 복원 → 파일 선택 → 모드 선택 (덮어쓰기/병합) → 확인
```

### 웹 흐름

```
로드
  ↓
[헤더: CSV임포트 | 백업 | 복원] [좌측 사이드바]
  ├─ 위치 필터 (체크박스)
  ├─ 유형 필터 (체크박스)
  └─ 추가 버튼
      ↓
중앙 테이블 (가나다순)
      ↓
사용자 상호작용:
  ├─ 필터 선택 → 즉시 적용
  ├─ 추가 버튼 → 우측 패널 오픈
  │   ├─ 입력 → 저장
  │   └─ 닫기
  ├─ 행 호버 → [수정][삭제] 버튼
  │   ├─ 수정 → 우측 패널 오픈
  │   └─ 삭제 → 확인 모달
  ├─ [CSV 임포트] 버튼 → 파일 선택 → 검증 → 저장 → 진행 표시
  ├─ [데이터 백업] 버튼 → JSON 다운로드 (즉시)
  └─ [데이터 복원] 버튼 → 파일 선택 → 모드 선택 (덮어쓰기/병합) → 확인
```

---

## 🖼️ PWA 아이콘 자체생성 방안

### 아이콘 생성 구현 방식

**방법 1: Canvas API (권장)**
```javascript
// src/utils/iconGenerator.js
export function generateIcon(size, theme = 'game') {
  const canvas = document.createElement('canvas');
  canvas.width = size;
  canvas.height = size;
  const ctx = canvas.getContext('2d');
  
  // 배경 (보라색 그라데이션)
  const gradient = ctx.createLinearGradient(0, 0, size, size);
  gradient.addColorStop(0, '#9370DB');
  gradient.addColorStop(1, '#B8860B');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, size, size);
  
  // 건물 아이콘 (SVG 경로 또는 도형)
  drawBuildingIcon(ctx, size);
  
  return canvas;
}

function drawBuildingIcon(ctx, size) {
  const buildingWidth = size * 0.6;
  const buildingHeight = size * 0.7;
  
  // 건물 본체 (골드색)
  ctx.fillStyle = '#FFD700';
  ctx.fillRect(
    (size - buildingWidth) / 2,
    (size - buildingHeight) / 2,
    buildingWidth,
    buildingHeight
  );
  
  // 창문 격자
  ctx.strokeStyle = '#2a2a2a';
  ctx.lineWidth = 2;
  const cols = 3, rows = 4;
  const windowWidth = buildingWidth / cols;
  const windowHeight = buildingHeight / rows;
  
  for (let i = 0; i <= cols; i++) {
    ctx.beginPath();
    ctx.moveTo((size - buildingWidth) / 2 + i * windowWidth, (size - buildingHeight) / 2);
    ctx.lineTo((size - buildingWidth) / 2 + i * windowWidth, (size - buildingHeight) / 2 + buildingHeight);
    ctx.stroke();
  }
  
  for (let j = 0; j <= rows; j++) {
    ctx.beginPath();
    ctx.moveTo((size - buildingWidth) / 2, (size - buildingHeight) / 2 + j * windowHeight);
    ctx.lineTo((size - buildingWidth) / 2 + buildingWidth, (size - buildingHeight) / 2 + j * windowHeight);
    ctx.stroke();
  }
}
```

### public 폴더 구조

```
public/
├── favicon.ico
├── icons/
│   ├── icon-192.png (자동생성)
│   └── icon-512.png (자동생성)
└── manifest.json
```

---

## 🎨 디자인 스펙 (게임UI 스타일)

### 색상

```
주색: #B8860B (Goldenrod - 골드)
강조색: #9370DB (Medium Purple - 보라)
배경: #2a2a2a (짙은 회색)
텍스트: #F5DEB3 (Wheat - 베이지)
경계선: #DAA520 (Goldenrod Dark)
```

### 프레임 요소

```css
/* 게임 UI 틀 */
.game-frame {
  border: 3px solid #DAA520;
  border-radius: 8px;
  box-shadow: 0 0 15px rgba(184, 134, 11, 0.3);
  background: linear-gradient(135deg, rgba(184, 134, 11, 0.1), rgba(147, 112, 219, 0.05));
  padding: 16px;
}

/* 제목 배너 */
.game-header-banner {
  background: linear-gradient(90deg, #9370DB, #B8860B);
  color: #2a2a2a;
  font-weight: bold;
  padding: 8px 12px;
  border-radius: 4px;
  margin-bottom: 12px;
}
```

### 타이포그래피

- **제목**: Bold 18-24px, 골드 색상
- **본문**: Regular 14-16px, 베이지 색상
- **라벨**: Medium 12-14px, 회색 톤

### 버튼 스타일

```
기본: 골드 배경, 검은 텍스트
호버: 보라색 강조, 밝기 증가
활성: 보라색 배경

삭제: 빨강 계열 강조
저장: 녹색 계열 강조
```

---

## 🚀 구현 순서 (Phase별)

### Phase 1: 기초 구조 (1-2일)
- [ ] Vite + React 프로젝트 세팅
- [ ] IndexedDB 훅 구현 (CRUD)
- [ ] 데이터 모델 정의
- [ ] Tailwind + 게임UI CSS 기본 세팅

### Phase 2: 모바일 뷰 (2-3일)
- [ ] 위치/유형 필터 탭 구현
- [ ] 건물 카드 UI (가나다순 정렬)
- [ ] 하단 네비게이션 바
- [ ] 플로팅 액션 버튼 + 추가 모달
- [ ] 카드 슬라이드 삭제 제스처

### Phase 3: 웹 뷰 (2-3일)
- [ ] 반응형 레이아웃 (desktop breakpoint)
- [ ] 좌측 사이드바 필터 패널
- [ ] 중앙 테이블 UI
- [ ] 우측 사이드패널 (추가/수정)
- [ ] 데스크톱 인터랙션

### Phase 3.5: CSV/JSON 마이그레이션 (1일)
- [ ] CSV 파일 임포트 기능 구현
  - [ ] csvImporter.js 유틸 작성
  - [ ] CSV 파싱 및 검증
  - [ ] 중복 체크 로직
  - [ ] 임포트 진행 상황 UI
- [ ] JSON 백업 기능 구현
  - [ ] jsonBackup.js 유틸 작성
  - [ ] 데이터 → JSON 내보내기
  - [ ] 메타데이터 포함
- [ ] JSON 복원 기능 구현
  - [ ] JSON 파일 임포트
  - [ ] 덮어쓰기/병합 옵션
  - [ ] 복원 진행 상황 UI
- [ ] 임포트/내보내기 UI 컴포넌트 구현

### Phase 4: PWA 아이콘 자체생성 (1일)
- [ ] 아이콘 생성 유틸 구현 (Canvas API)
- [ ] 건물 아이콘 디자인 (SVG 기반)
- [ ] 192x192 PNG 자동생성
- [ ] 512x512 PNG 자동생성
- [ ] favicon.ico 생성
- [ ] public/icons 폴더 구성

### Phase 5: PWA 세팅 (1일)
- [ ] Service Worker 등록
- [ ] manifest.json 구성 (생성된 아이콘 경로 참조)
- [ ] 앱 설치 가능하게 설정
- [ ] 오프라인 지원

### Phase 6: GitHub Pages 배포 준비 (1일)
- [ ] GitHub 리포지토리 생성
- [ ] gh-pages 브랜치 생성
- [ ] vite.config.js base 경로 설정 (`/building-management-pwa/`)
- [ ] GitHub Actions 워크플로우 작성 (자동 배포)
- [ ] 배포 전 빌드 테스트

### Phase 7: 테스트 & 배포 (1일)
- [ ] 크로스 브라우저 테스트
- [ ] 모바일 장치 테스트
- [ ] IndexedDB 동기화 테스트
- [ ] CSV 임포트/JSON 백업 복원 테스트
- [ ] GitHub Pages 배포 확인 (`https://username.github.io/building-management-pwa/`)
- [ ] PWA 설치 테스트
- [ ] 오프라인 모드 테스트

---

## 🔧 구현 시 주의사항

### IndexedDB

1. **데이터 마이그레이션**: 스키마 변경 시 버전 관리
2. **용량 제한**: ~50MB (정기 정리 필요)
3. **트랜잭션**: 동시성 문제 방지
4. **에러 핸들링**: 쿼터 초과 시 처리

### 정렬 & 필터링

1. **가나다순**: 건물명 기준 (유니코드 정렬)
2. **중복 위치+유형**: 처음부터 고려 (복합 필터)
3. **필터 유지**: Session/Local Storage와 구분

### 반응형

- **모바일**: < 768px (하단 탭바)
- **태블릿**: 768px ~ 1024px (혼합)
- **데스크톱**: > 1024px (사이드바)

### PWA

- **오프라인 지원**: Service Worker가 모든 요청 캐시
- **아이콘**: 192x192, 512x512 PNG 필수
- **Manifest**: 홈 화면 추가 정보 포함

### CSV/JSON 마이그레이션

1. **CSV 파싱**:
   - UTF-8 & CP949 인코딩 자동 감지
   - 빈 행 무시
   - 헤더 필수 (첫 줄)
   
2. **데이터 검증**:
   - 필수 칼럼 체크: 건물명, 지번, 위치, 유형
   - 숫자 필드 자동 변환 (층수, 주차대수, 세대수)
   - 중복 건물명 체크
   
3. **JSON 백업**:
   - 메타데이터 버전 관리 (향후 포맷 변경 시)
   - 파일명에 타임스탬프 포함 (YYYY-MM-DD)
   - 모든 필드 보존 (id, 생성일시, 수정일시)
   
4. **JSON 복원**:
   - 덮어쓰기: 안전 확인 필수 (기존 데이터 손실)
   - 병합: 건물명 기준 중복 체크
   - 복원 후 IndexedDB 재인덱싱

## 🚀 GitHub Pages 배포 설정

### 1단계: GitHub 저장소 설정

```bash
# 1. GitHub에서 새 저장소 생성: building-management-pwa

# 2. 로컬에서 초기화
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/YOUR_USERNAME/building-management-pwa.git
git push -u origin main
```

### 2단계: Vite 설정 수정

**vite.config.js**
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/building-management-pwa/',  // GitHub Pages 경로
  build: {
    outDir: 'dist',
    sourcemap: false,
  }
})
```

### 3단계: package.json 수정

```json
{
  "name": "building-management-pwa",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "deploy": "npm run build && gh-pages -d dist"
  },
  "dependencies": {
    // ... 기존 의존성
  },
  "devDependencies": {
    "vite": "^4.4.0",
    "@vitejs/plugin-react": "^4.0.0",
    "gh-pages": "^6.0.0"  // 추가
  }
}
```

### 4단계: GitHub Actions 자동 배포 설정

**.github/workflows/deploy.yml**
```yaml
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: your-custom-domain.com  # (선택사항) 커스텀 도메인
```

### 5단계: 수동 배포

```bash
# 라이브러리 설치
npm install gh-pages --save-dev

# 배포
npm run deploy
```

### 6단계: GitHub Pages 활성화

**GitHub 저장소 Settings → Pages**
- Source: Deploy from a branch
- Branch: gh-pages
- Folder: /(root)
- Save

### 배포 후 접속 URL

```
https://YOUR_USERNAME.github.io/building-management-pwa/
```

### 커스텀 도메인 설정 (선택사항)

1. 도메인 DNS 설정 (A record 또는 CNAME)
2. `.github/workflows/deploy.yml`에서 `cname: your-domain.com` 설정
3. GitHub Pages 설정에서 도메인 입력

---

## 📦 필수 라이브러리

```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "typescript": "^5.0.0",
    "idb": "^8.0.0",
    "lucide-react": "^0.263.1",
    "tailwindcss": "^3.3.0"
  },
  "devDependencies": {
    "vite": "^4.4.0",
    "@vitejs/plugin-react": "^4.0.0",
    "workbox-cli": "^7.0.0"
  },
  "optionalDependencies": {
    "papaparse": "^5.4.1"
  }
}
```

**주의:**
- `papaparse`: CSV 파싱 강화 (선택사항, 현재는 순수 JS로 구현)
- CSV/JSON 처리는 순수 JavaScript로 구현 가능

---

## ✅ 체크리스트

### 기능 완성
- [ ] 데이터 입력 (모바일/웹)
- [ ] 데이터 조회 (필터링, 정렬)
- [ ] 데이터 수정
- [ ] 데이터 삭제
- [ ] IndexedDB 동기화
- [ ] CSV 파일 임포트 (초기 데이터 마이그레이션)
- [ ] JSON 백업 (데이터 내보내기)
- [ ] JSON 복원 (데이터 가져오기, 덮어쓰기/병합)

### UI/UX
- [ ] 게임 UI 스타일 적용
- [ ] 모바일 레이아웃
- [ ] 웹 레이아웃
- [ ] 반응형 처리
- [ ] 로딩 상태 표시
- [ ] 에러 메시지

### 아이콘 & PWA
- [ ] 아이콘 생성 유틸 구현 (Canvas API)
- [ ] 192x192 PNG 생성
- [ ] 512x512 PNG 생성
- [ ] favicon.ico 생성
- [ ] manifest.json 구성
- [ ] Service Worker 등록
- [ ] 앱 설치 가능 여부 테스트
- [ ] 오프라인 작동 테스트

### GitHub Pages 배포
- [ ] GitHub 저장소 생성
- [ ] vite.config.js base 경로 설정
- [ ] GitHub Actions 워크플로우 작성
- [ ] 자동 배포 테스트
- [ ] GitHub Pages 활성화 확인
- [ ] 배포 URL 접속 확인 (`https://username.github.io/building-management-pwa/`)

### 성능
- [ ] 렌더링 최적화 (메모이제이션)
- [ ] IndexedDB 쿼리 성능
- [ ] 번들 사이즈 < 500KB
- [ ] Lighthouse 성능 점수 90+ 달성

---

## 🎯 시작 가이드 (Step by Step)

### 1단계: 프로젝트 초기화

```bash
# Vite 프로젝트 생성
npm create vite@latest building-management-pwa -- --template react

# 프로젝트 이동
cd building-management-pwa

# 의존성 설치
npm install

# GitHub Pages 배포용 라이브러리 추가
npm install idb lucide-react gh-pages
```

### 2단계: 프로젝트 구조 생성

```bash
# 폴더 생성
mkdir -p src/components/common
mkdir -p src/components/mobile
mkdir -p src/components/web
mkdir -p src/components/forms
mkdir -p src/components/modals
mkdir -p src/hooks
mkdir -p src/context
mkdir -p src/styles
mkdir -p src/utils
mkdir -p src/data
mkdir -p public/icons

# 필수 파일 생성 (계속)
touch src/utils/iconGenerator.js
touch src/utils/validationUtils.js
touch public/manifest.json
mkdir -p .github/workflows
touch .github/workflows/deploy.yml
```

### 3단계: 설정 파일 수정

```bash
# vite.config.js 수정 (base 경로)
# package.json 수정 (scripts 추가)
# .github/workflows/deploy.yml 작성
```

### 4단계: GitHub 저장소 설정

```bash
# Git 초기화
git init
git add .
git commit -m "Initial commit"
git branch -M main

# GitHub에 푸시
git remote add origin https://github.com/YOUR_USERNAME/building-management-pwa.git
git push -u origin main
```

### 5단계: 아이콘 생성

```bash
# src/utils/iconGenerator.js에서 Canvas API 또는 SVG 생성 코드 작성
# 생성된 PNG를 public/icons/에 저장
# manifest.json에 아이콘 경로 등록
```

### 6단계: Claude Code에서 순차 개발

**Phase 1-7에 따라 파일 하나씩 작성:**

**Phase 1: 기초 구조**
1. `src/data/constants.js` (위치, 유형 옵션)
2. `src/utils/validationUtils.js` (검증)
3. `src/utils/sortUtils.js` (정렬)
4. `src/hooks/useIndexedDB.js` (IndexedDB 훅)

**Phase 2: 모바일**
5. `src/components/mobile/MobileFilterTabs.jsx`
6. `src/components/mobile/MobileBuildingCard.jsx`
7. `src/components/mobile/MobileView.jsx`

**Phase 3: 웹**
8. `src/components/web/WebFilterPanel.jsx`
9. `src/components/web/WebBuildingTable.jsx`
10. `src/components/web/WebView.jsx`

**Phase 3.5: CSV/JSON 마이그레이션 ⭐**
11. `src/utils/csvImporter.js` (CSV 파싱 & 검증)
12. `src/utils/jsonBackup.js` (JSON 백업/복원)
13. `src/components/modals/ImportCSVModal.jsx`
14. `src/components/modals/BackupRestoreModal.jsx`

**Phase 4-7: PWA & 배포**
15. `src/utils/iconGenerator.js` (아이콘 생성)
16. `src/App.jsx` (메인 컴포넌트)
17. `public/manifest.json` (PWA 설정)
18. `.github/workflows/deploy.yml` (자동 배포)

### 7단계: 배포

```bash
# 로컬 빌드 테스트
npm run build
npm run preview

# GitHub Pages 배포
npm run deploy

# 또는 GitHub Actions 자동 배포 (main에 push)
git push
```

### 8단계: 배포 확인

```
https://YOUR_USERNAME.github.io/building-management-pwa/
```

---

## 📝 추가 팁

### 로컬 개발

```bash
# 개발 서버 실행
npm run dev
# http://localhost:5173 접속
```

### PWA 테스트

**Chrome DevTools → Application → Manifest**
- PWA 설치 가능 여부 확인

**Chrome DevTools → Application → Service Workers**
- Service Worker 등록 상태 확인

**오프라인 테스트**
- DevTools → Network → Offline 체크
- 앱 동작 확인

### IndexedDB 확인

```javascript
// 브라우저 콘솔에서
// IndexedDB 데이터 확인
const db = await idb.openDB('BuildingDB');
const buildings = await db.getAll('buildings');
console.log(buildings);
```

### CSV 임포트 테스트

```javascript
// CSV 파일 생성 (buildings-test.csv)
건물명,지번,사용승인일,층수,주차대수,세대수,공동현관비번,관리실번호,위치,유형
테스트건물1,테스트동 100-1,2025-01-01,5,10,20,1111,111,마곡A,오피스텔
테스트건물2,테스트동 200-2,2025-01-02,10,20,40,2222,222,발산B,오피스

// 앱에서 CSV 임포트 → 성공 여부 확인
// DevTools Console에서
const db = await idb.openDB('BuildingDB');
const buildings = await db.getAll('buildings');
console.log(buildings.filter(b => b.건물명.includes('테스트')));
```

### JSON 백업/복원 테스트

```javascript
// 1. 데이터 백업 (automatic download)
// buildings-backup-2025-10-30.json 파일이 다운로드됨

// 2. 몇 개 데이터 삭제
// IndexedDB에서 수동 삭제

// 3. JSON 복원 (병합 모드)
// buildings-backup-2025-10-30.json 선택 → 병합 복원
// DevTools에서 확인
const db = await idb.openDB('BuildingDB');
const buildings = await db.getAll('buildings');
console.log('복원 후 총 건물 수:', buildings.length);
```

---

## 🎓 참고 자료

- [Vite 공식 문서](https://vitejs.dev/)
- [React 공식 문서](https://react.dev/)
- [IndexedDB 가이드](https://developer.mozilla.org/ko/docs/Web/API/IndexedDB_API)
- [PWA 개발 가이드](https://web.dev/progressive-web-apps/)
- [GitHub Pages 문서](https://docs.github.com/en/pages)
- [Tailwind CSS 문서](https://tailwindcss.com/)

---

*작성일: 2025-10-30*  
*버전: 3.0 (CSV/JSON 마이그레이션, 아이콘 자체생성, GitHub Pages 배포 추가)*  
*최종 업데이트: 2025-10-30*